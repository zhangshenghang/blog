(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{644:function(t,a,s){"use strict";s.r(a);var e=s(20),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"chain分隔"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chain分隔"}},[t._v("#")]),t._v(" Chain分隔")]),t._v(" "),s("p",[t._v("[toc]")]),t._v(" "),s("h2",{attrs:{id:"如何切断任务链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何切断任务链"}},[t._v("#")]),t._v(" 如何切断任务链？")]),t._v(" "),s("p",[t._v("由于共享slot的存在，当一个任务链的计算量特别庞大时，且只在一个slot上执行，对于slot的压力过大，需要拆开。")]),t._v(" "),s("p",[t._v("1）disableChaining：如果对一个算子使用了disableChaining（取消任务链），那么该算子就会与前后算子隔离开，不参与任务链的组合，独用一个slot。")]),t._v(" "),s("p",[t._v("2）startNewChain：如果一个任务链只是过于庞大，但是算子之间的操作简单，仅想拆开为2个任务链，并且参与任务链组合，就需要对算子使用startNewChain(开启一个新的任务链)，意思就是之前该怎么合并就怎么合并，map之后重新合成任务链。")]),t._v(" "),s("p",[t._v("3）env.disableOperatorchaining ，全局切断任务链。所有的算子都是独立的任务，再按照并行度拆分开。")]),t._v(" "),s("p",[t._v("4）slotSharingGroup：取消任务链后，还需要打破slot共享，使用单独的slot。这时需要使用slotSharingGroup，之前的算子不管，从当前算子开始共享slot，并可以为共享组命名。同一个共享组内的算子可以共享一个slot，不同共享组的slot必须分配到不同的slot。且可以设置多个共享组，跨算子设置。")]),t._v(" "),s("h3",{attrs:{id:"startnewchain-与-disablechaining区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#startnewchain-与-disablechaining区别"}},[t._v("#")]),t._v(" startNewChain 与 disableChaining区别")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("stream.startNewChain()\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("从当前算子开启新的链，与前面的链断开，后面的链不断开")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("stream.disableChaining()\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("当前算子独立一个链，前后都分开，从stream算子开始到结束禁用Chain，单独划出来，将不会合并链。")]),t._v(" "),s("h3",{attrs:{id:"全局切断任务链-chain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局切断任务链-chain"}},[t._v("#")]),t._v(" 全局切断任务链(chain)")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("env.disableOperatorchaining\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("全局切断任务链。所有的算子都是独立的任务，再按照并行度拆分开")]),t._v(" "),s("h2",{attrs:{id:"web端效果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web端效果"}},[t._v("#")]),t._v(" web端效果")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2023/03/10/IbHP6wdhekNuMJ8.png",alt:"image-20220617165547211"}})]),t._v(" "),s("h2",{attrs:{id:"查看隔离后依赖链忙碌程度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看隔离后依赖链忙碌程度"}},[t._v("#")]),t._v(" 查看隔离后依赖链忙碌程度")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2023/03/10/DLdNvWm9ZRyu27E.png",alt:"image-20220706145306534"}})]),t._v(" "),s("p",[s("strong",[t._v("Backpressured（背压/反压）：")]),t._v(" 从字面上可以理解，后端的压力，这里代表当前算子的下一个环节压力，也可以理解为，下一个环节有这个Backpressured比例数据未处理")]),t._v(" "),s("p",[s("strong",[t._v("busy（忙碌）：")]),t._v(" 代表当前环节忙碌程度")]),t._v(" "),s("p",[t._v("**Idle（空闲）：**代表当前环节空闲程度")]),t._v(" "),s("h3",{attrs:{id:"什么是backpressured-被压-反压"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是backpressured-被压-反压"}},[t._v("#")]),t._v(" 什么是Backpressured(被压/反压)？")]),t._v(" "),s("p",[t._v("概括来说，反压就是Job Graph中的某些operator处理数据的速率低于接收数据的速率，造成数据积压，积压的数据填充到这些operator子任务的输入缓冲区。一旦输入缓冲区满了，反压就会传播到上游子任务的输出缓冲区。上游子任务也会被迫降低自身数据处理速度，以匹配下游opeartor的处理速度。由此类推，反压一步一步向上游传递，直至到达数据源operator端。")]),t._v(" "),s("p",[t._v("具体关于Backpressured，参考《Flink BackPressure详细介绍》")]),t._v(" "),s("h2",{attrs:{id:"代码样例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码样例"}},[t._v("#")]),t._v(" 代码样例")]),t._v(" "),s("div",{staticClass:"language-scala line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" writeHbaseResult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userChangeWriteHbase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" HbaseProcessFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"write hbase"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("disableChaining"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" writeHbaseResult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userChangeWriteHbase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" HbaseProcessFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"write hbase"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startNewChain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/qq_31866793/article/details/102786249")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/weixin_42716237/article/details/110732812")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/qq_16504067/article/details/123535099")]),t._v(" "),s("p",[t._v("https://www.kancloud.cn/zhangpn/flink/1743325")]),t._v(" "),s("p",[t._v("https://cdn.modb.pro/db/128767")]),t._v(" "),s("p",[t._v("https://www.163.com/dy/article/H2VSPV1T05529EM4.html")]),t._v(" "),s("p",[t._v("https://v.youku.com/v_show/id_XNDU2MjU5NjI4OA==.html")]),t._v(" "),s("p",[t._v("https://cloud.tencent.com/developer/article/1797980")])])}),[],!1,null,null,null);a.default=n.exports}}]);